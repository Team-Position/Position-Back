<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.positionback.mapper.admin.AdminMapper">
    <!-- 회원 관리 -->
    <!-- 일반 회원 목록 -->
    <!-- 일반 회원 목록 검색 로직 -->
    <sql id="MemberSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                member_name like CONCAT('%', #{search.keyword}, '%')
                or member_email like CONCAT('%', #{search.keyword}, '%')
                or member_address like CONCAT('%', #{search.keyword}, '%')
                or member_phone like CONCAT('%', #{search.keyword}, '%')
                )
            </if>
            <if test="search.types != null and search.types.length > 0">
                <choose>
                    <when test="search.types[0] == 'active'">
                        and member_status = '활동중'
                    </when>
                    <when test="search.types[0] == 'suspended'">
                        and member_status = '정지'
                    </when>
                    <when test="search.types[0] == 'withdrawn'">
                        and member_status = '탈퇴'
                    </when>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 일반 회원 목록 조회 -->
    <select id="selectAllMembers" resultType="memberDTO">
        select id,
        member_name,
        coalesce(member_email, member_kakao_email) AS memberEmail,
        member_address,
        member_phone,
        member_status,
        created_date
        from tbl_member
        <include refid="MemberSearch"/>
        <choose>
            <when test="search.types != null and search.types[0] == 'recent'">
                order by created_date desc
            </when>
            <when test="search.types[0] == 'active'">
                order by member_status = '활동중' desc, created_date desc
            </when>
            <when test="search.types[0] == 'suspended'">
                order by member_status = '정지' desc, created_date desc
            </when>
            <when test="search.types[0] == 'withdrawn'">
                order by member_status = '탈퇴' desc, created_date desc
            </when>
            <otherwise>
                order by created_date desc
            </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 일반 회원 전체 인원 확인 -->
    <select id="selectMemberTotal">
        select count(*) from tbl_member
    </select>

    <!-- 일반 회원 목록에서 검색 후 인원 확인 -->
    <select id="selectTotalWithMemberSearch">
        select count(*) from tbl_member
        <include refid="MemberSearch"/>
    </select>

    <!-- 일반 회원 상태 변경 -->
    <update id="updateMemberStatus">
        update tbl_member
        set member_status = #{status}, updated_date = NOW()
        where id = #{memberId};
    </update>

    <!-- 기업 회원 목록 -->
    <!-- 기업 회원 목록 검색 로직 -->
    <sql id="CorporationSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                and (
                corporation_name like concat('%', #{search.keyword}, '%')
                or corporation_email like concat('%', #{search.keyword}, '%')
                or corporation_address like concat('%', #{search.keyword}, '%')
                or corporation_gen like concat('%', #{search.keyword}, '%')
                or corporation_code like concat('%', #{search.keyword}, '%')
                )
            </if>
        </where>
    </sql>

    <!-- 기업 회원 목록 조회 -->
    <select id="selectAllCorporationMembers" resultType="corporationDTO">
        select id,
               corporation_name,
               corporation_address,
               corporation_email,
               corporation_gen,
               corporation_code,
               created_date
        from tbl_corporation
        <include refid="CorporationSearch"/>
        order by created_date desc
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 기업 회원 전체 인원 확인 -->
    <select id="selectCorporationTotal">
        select count(*) from tbl_corporation
    </select>

    <!-- 기업 회원 목록에서 검색 후 인원 확인 -->
    <select id="selectTotalWithCorporationSearch">
        select count(*) from tbl_corporation
        <include refid="CorporationSearch"/>
    </select>

    <!-- 지원 현황 관리 -->
    <!-- 지원 현황 -->
    <!-- 지원 현황 목록 검색 로직 -->
    <sql id="ApplySearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                c.corporation_name like concat('%', #{search.keyword}, '%')
                or m.member_name like concat('%', #{search.keyword}, '%')
                or m.member_phone like concat('%', #{search.keyword}, '%')
                or a.apply_type like concat('%', #{search.keyword}, '%')
                )
            </if>
            <if test="search.types != null and search.types.length > 0">
                <choose>
                    <when test="search.types[0] == 'applycomplete'">
                        and apply_status = '지원 완료'
                    </when>
                    <when test="search.types[0] == 'applycancel'">
                        and apply_status = '지원 취소'
                    </when>
                    <when test="search.types[0] == 'applypass'">
                        and apply_status = '지원 합격'
                    </when>
                    <when test="search.types[0] == 'applyfail'">
                        and apply_status = '지원 불합격'
                    </when>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 지원 현황 목록 조회 -->
    <select id="selectAllApply">
        select c.corporation_name, a.created_date, n.notice_title, m.member_name, m.member_phone, a.apply_type, a.apply_status
        from tbl_apply a
        join tbl_notice n on a.notice_id = n.id
        join tbl_corporation c on n.corporation_id = c.id
        join tbl_resume r on a.resume_id = r.id
        join tbl_member m on r.member_id = m.id
        <include refid="ApplySearch"/>
        <choose>
            <when test="search.types != null and search.types.length > 0">
                <if test="search.types[0] == 'recent'">
                    order by created_date desc
                </if>
            </when>
            <otherwise>
                order by created_date desc
            </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 지원 현황 전체 인원 확인 -->
    <select id="selectApplyTotal">
        select count(*)
        from tbl_apply a
        join tbl_notice n on a.notice_id = n.id
        join tbl_corporation c on n.corporation_id = c.id
        join tbl_resume r on a.resume_id = r.id
        join tbl_member m on r.member_id = m.id
    </select>

    <!-- 지원 현황 목록에서 검색 후 인원 확인 -->
    <select id="selectTotalWithApplySearch">
        select count(*)
        from tbl_apply a
        join tbl_notice n on a.notice_id = n.id
        join tbl_corporation c on n.corporation_id = c.id
        join tbl_resume r on a.resume_id = r.id
        join tbl_member m on r.member_id = m.id
        <include refid="ApplySearch"/>
    </select>

    <!-- 면접 현황 -->
    <!-- 면접 현황 목록 검색 로직 -->
    <sql id="InterviewSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                c.corporation_name like concat('%', #{search.keyword}, '%')
                or n.notice_title like concat('%', #{search.keyword}, '%')
                or m.member_name like concat('%', #{search.keyword}, '%')
                or m.member_phone like concat('%', #{search.keyword}, '%')
                or n.notice_job_category_name like concat('%', #{search.keyword}, '%')
                )
            </if>
            <if test="search.types != null and search.types.length > 0">
                <choose>
                    <when test="search.types[0] == 'interviewexpected'">
                        and interview_status = '면접 예정'
                    </when>
                    <when test="search.types[0] == 'interviewcancel'">
                        and interview_status = '면접 취소'
                    </when>
                    <when test="search.types[0] == 'interviewpass'">
                        and interview_status = '면접 합격'
                    </when>
                    <when test="search.types[0] == 'interviewfail'">
                        and interview_status = '면접 불합격'
                    </when>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 면접 현황 목록 조회 -->
    <select id="selectAllInterview">
        select c.corporation_name, i.interview_date as interview_apply_pass_date, n.notice_title, m.member_name, m.member_phone, n.notice_job_category_name, i.interview_status
        from tbl_interview i
        join tbl_corporation c on i.corporation_id = c.id
        join tbl_notice n on n.corporation_id = c.id
        join tbl_resume r on i.resume_id = r.id
        join tbl_member m on r.member_id = m.id
        <include refid="InterviewSearch"/>
        <choose>
           <when test="search.types != null and search.types.length > 0">
               <if test="search.types[0] == 'recent'">
                   order by i.interview_date desc
               </if>
           </when>
           <otherwise>
               order by i.interview_date desc
           </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 면접 현황 전체 인원 확인 -->
    <select id="selectInterviewTotal">
        select count(*)
        from tbl_interview i
        join tbl_corporation c on i.corporation_id = c.id
        join tbl_notice n on n.corporation_id = c.id
        join tbl_resume r on i.resume_id = r.id
        join tbl_member m on r.member_id = m.id
    </select>

    <!-- 면접 현황 목록에서 검색 후 인원 확인 -->
    <select id="selectTotalWithInterviewSearch">
        select count(*)
        from tbl_interview i
        join tbl_corporation c on i.corporation_id = c.id
        join tbl_notice n on n.corporation_id = c.id
        join tbl_resume r on i.resume_id = r.id
        join tbl_member m on r.member_id = m.id
        <include refid="InterviewSearch"/>
    </select>

    <!-- 포지션(인턴십) 현황 목록 -->
    <!-- 포지션(인턴십) 현황 목록 검색 로직 -->
    <sql id="PositionSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                c.corporation_name like concat('%', #{search.keyword}, '%')
                or n.notice_work_start_date like concat('%', #{search.keyword}, '%')
                or m.member_name like concat('%', #{search.keyword}, '%')
                or m.member_phone like concat('%', #{search.keyword}, '%')
                or n.notice_job_category_name like concat('%', #{search.keyword}, '%')
                )
            </if>
            <if test="search.types != null and search.types.length > 0">
                <choose>
                    <when test="search.types[0] == 'positionschedule'">
                        and position_status = '포지션 예정'
                    </when>
                    <when test="search.types[0] == 'positioncompletion'">
                        and position_status = '포지션 수료'
                    </when>
                    <when test="search.types[0] == 'positionnotcompleted'">
                        and position_status = '포지션 미수료'
                    </when>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 포지션(인턴십) 현황 목록 조회 -->
    <select id="selectAllPosition">
        select c.corporation_name, n.notice_work_start_date, n.notice_title, m.member_name, m.member_phone, n.notice_job_category_name, p.position_status
        from tbl_position p
        join tbl_notice n on p.notice_id = n.id
        join tbl_corporation c on n.corporation_id = c.id
        join tbl_member m on p.member_id = m.id
        <include refid="PositionSearch"/>
        <choose>
            <when test="search.types != null and search.types.length > 0">
                <if test="search.types[0] == 'recent'">
                    order by n.notice_work_start_date desc
                </if>
            </when>
            <otherwise>
                order by n.notice_work_start_date desc
            </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 포지션(인턴십) 현황 전체 인원 확인 -->
    <select id="selectPositionTotal">
        select count(*)
        from tbl_position p
        join tbl_notice n on p.notice_id = n.id
        join tbl_corporation c on n.corporation_id = c.id
        join tbl_member m on p.member_id = m.id
    </select>

    <!-- 포지션(인턴십) 현황 목록에서 검색 후 인원 확인 -->
    <select id="selectTotalWithPositionSearch">
        select count(*)
        from tbl_position p
        join tbl_notice n on p.notice_id = n.id
        join tbl_corporation c on n.corporation_id = c.id
        join tbl_member m on p.member_id = m.id
        <include refid="PositionSearch"/>
    </select>

    <!-- 결제 내역 관리 -->
    <!-- 결제 내역 목록 -->
    <!-- 결제 내역 목록 검색 로직 -->
    <sql id="PaymentSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                member_name like concat('%', #{search.keyword}, '%')
                or notice_title like concat('%', #{search.keyword}, '%')
                or member_phone like concat('%', #{search.keyword}, '%')
                )
            </if>
            <if test="search.types != null and search.types.length >0">
                <choose>
                    <when test="search.types[0] == 'paymentcomplete'">
                        and payment_status = '결제 완료'
                    </when>
                    <when test="search.types[0] == 'paymentcancel'">
                        and payment_status = '결제 취소'
                    </when>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 결제 내역 목록 조회 -->
    <select id="selectAllPayment">
        select m.member_name, p.created_date, n.notice_title, p.payment_amount, m.member_phone, p.payment_method, p.payment_status
        from tbl_payment p
        join tbl_member m on p.member_id = m.id
        join tbl_notice n on p.notice_id = n.id
        <include refid="PaymentSearch"/>
        <choose>
            <when test="search.types != null and search.types.length > 0">
                order by p.created_date desc
            </when>
            <otherwise>
                order by p.created_date desc
            </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 결제 내역 목록에서 전체 결제 수 확인 -->
    <select id="selectPaymentTotal">
        select count(*)
        from tbl_payment p
        join tbl_member m on p.member_id = m.id
        join tbl_notice n on p.notice_id = n.id
    </select>

    <!-- 결제 내역 목록에서 검색 후 결제 수 확인 -->
    <select id="selectTotalWithPaymentSearch">
        select count(*)
        from tbl_payment p
        join tbl_member m on p.member_id = m.id
        join tbl_notice n on p.notice_id = n.id
        <include refid="PaymentSearch"></include>
    </select>

    <!-- 작성 관리 -->
    <!-- 공고 작성 -->
    <!-- 공고 작성 목록 검색 로직 -->
    <sql id="NoticeSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                corporation_name like concat('%', #{search.keyword}, '%')
                or notice_title like concat('%', #{search.keyword}, '%')
                or corporation_email like concat('%', #{search.keyword}, '%')
                or corporation_gen like concat('%', #{search.keyword}, '%')
                )
            </if>
            <if test="search.types != null and search.types.length > 0">
                <choose>
                    <when test="search.types[0] == 'hiring'">
                        <![CDATA[and n.notice_end_date >= NOW()]]>
                    </when>
                    <when test="search.types[0] == 'hiringClosed'">
                        <![CDATA[and n.notice_end_date < NOW()]]>
                    </when>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 공고 작성 목록 조회 -->
    <select id="selectAllNotice">
        select c.corporation_name,
               n.notice_work_start_date,
               n.notice_title,
               c.corporation_email,
               c.corporation_gen,
               n.notice_end_date,
               case
                   when n.notice_end_date >= NOW() then '채용중'
                   else '채용 마감'
                   end as notice_status
        from tbl_notice n
        join tbl_corporation c on n.corporation_id = c.id
        <include refid="NoticeSearch"/>
        <choose>
            <when test="search.types[0] == 'hiring'">
                <![CDATA[ order by (n.notice_end_date >= NOW()) desc, n.notice_work_start_date desc ]]>
            </when>
            <when test="search.types[0] == 'hiringClosed'">
                <![CDATA[ order by (n.notice_end_date < NOW()) desc, n.notice_work_start_date desc ]]>
            </when>
            <otherwise>
                <![CDATA[ order by n.notice_work_start_date desc ]]>
            </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 공고 작성 목록에서 전체 공고 갯수 확인 -->
    <select id="selectNoticeTotal">
        select count(*)
        from tbl_notice n
        join tbl_corporation c on n.corporation_id = c.id
    </select>

    <!-- 공고 작성 목록에서 검색 후 공고 갯수 확인 -->
    <select id="selectTotalWithNoticeSearch">
        select count(*)
        from tbl_notice n
        join tbl_corporation c on n.corporation_id = c.id
        <include refid="NoticeSearch"/>
    </select>

    <!-- 게시글 작성 관리 -->
    <!-- 게시글 작성 목록 검색 로직 -->
    <sql id="PostSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                m.member_name like concat('%', #{search.keyword}, '%')
                or p.post_title like concat('%', #{search.keyword}, '%')
                or p.post_content like concat('%', #{search.keyword}, '%')
                )
            </if>
        </where>
    </sql>

    <!-- 게시글 작성 현황 목록 조회 -->
    <select id="selectAllPost">
        select m.member_name, p.created_date, p.post_title, p.post_content, p.post_read_count
        from tbl_post p
        join tbl_member m
        on p.member_id = m.id
        <include refid="PostSearch"/>
        <choose>
            <when test="search.types != null and search.types.length > 0">
                <choose>
                    <when test="search.types[0] == 'recent'">
                        order by p.created_date desc
                    </when>
                    <when test="search.types[0] == 'views'">
                        order by p.post_read_count desc
                    </when>
                </choose>
            </when>
            <otherwise>
                order by p.created_date desc
            </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 게시글 작성 현황 목록에서 전체 게시글 수 확인 -->
    <select id="selectPostTotal">
        select count(*)
        from tbl_post p
        join tbl_member m
        on p.member_id = m.id
    </select>

    <!-- 게시글 작성 현황 목록에서 검색 후 전체 게시글 수 확인 -->
    <select id="selectTotalWithPostSearch">
        select count(*)
        from tbl_post p
        join tbl_member m
        on p.member_id = m.id
        <include refid="PostSearch"/>
    </select>

    <!-- 댓글 작성 관리 -->
    <!-- 댓글 작성 현황 목록 검색 로직 -->
    <sql id="ReplySearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                m.member_name like concat('%', #{search.keyword}, '%')
                or p.post_title like concat('%', #{search.keyword}, '%')
                or r.reply_content like concat('%', #{search.keyword}, '%')
                )
            </if>
        </where>
    </sql>

    <!-- 댓글 작성 현황 목록 조회 -->
    <select id="selectAllReply">
        select
            m.member_name,
            r.created_date,
            p.post_title,
            r.reply_content
        from
            tbl_reply r
            join tbl_member m on r.member_id = m.id
            join tbl_post p on r.post_id = p.id
        <include refid="ReplySearch"/>
        order by r.created_date desc
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 댓글 작성 현황 목록에서 전체 댓글 수 확인 -->
    <select id="selectReplyTotal">
        select count(*)
        from tbl_reply r
        join tbl_member m on r.member_id = m.id
        join tbl_post p on r.post_id = p.id
    </select>

    <!-- 댓글 작성 현황 목록에서 검색 후 전체 댓글 수 확인 -->
    <select id="selectTotalWithReplySearch">
        select count(*)
        from tbl_reply r
        join tbl_member m on r.member_id = m.id
        join tbl_post p on r.post_id = p.id
        <include refid="ReplySearch"/>
    </select>

    <!-- 후기 관리 -->
    <!-- 면접 후기 -->
    <!-- 면접 후기 작성 현황 목록 검색 로직 -->
    <sql id="InterviewReviewSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                c.corporation_name like concat('%', #{search.keyword}, '%')
                or n.notice_title like concat('%', #{search.keyword}, '%')
                or m.member_name like concat('%', #{search.keyword}, '%')
                or m.member_phone like concat('%', #{search.keyword}, '%')
                or a.apply_type like concat('%', #{search.keyword}, '%')
                )
            </if>
            <if test="search.types != null and search.types.length >0">
                <choose>
                    <when test="search.types[0] == 'interviewPass'">
                        and interview_passed = '면접 합격'
                    </when>
                    <when test="search.types[0] == 'interviewFail'">
                        and interview_passed = '면접 불합격'
                    </when>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 면접 후기 작성 목록 조회 -->
    <select id="selectAllInterviewReview">
        select c.corporation_name, r.created_date, i.interview_date, n.notice_title, m.member_name, m.member_phone, a.apply_type, r.interview_passed
        from tbl_interview_review r
        join tbl_corporation c on r.corporation_id = c.id
        join tbl_member m on r.member_id = m.id
        join tbl_interview i on r.id = i.id
        join tbl_apply a on i.resume_id = a.resume_id
        join tbl_notice n on a.notice_id = n.id
        <include refid="InterviewReviewSearch"/>
        <choose>
            <when test="search.types != null and search.types.length > 0">
                <if test="search.types[0] == 'recent'">
                    order by created_date desc
                </if>
            </when>
            <otherwise>
                order by created_date desc
            </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 면접 후기 작성 목록에서 전체 작성 갯수 확인 -->
    <select id="selectInterviewReviewTotal">
        select count(*)
        from tbl_interview_review r
        join tbl_corporation c on r.corporation_id = c.id
        join tbl_member m on r.member_id = m.id
        join tbl_interview i on r.id = i.id
        join tbl_apply a on i.resume_id = a.resume_id
        join tbl_notice n on a.notice_id = n.id
    </select>

    <!-- 면접 후기 작성 목록에서 검색 후 작성 갯수 확인 -->
    <select id="selectTotalWithInterviewReviewSearch">
        select count(*)
        from tbl_interview_review r
        join tbl_corporation c on r.corporation_id = c.id
        join tbl_member m on r.member_id = m.id
        join tbl_interview i on r.id = i.id
        join tbl_apply a on i.resume_id = a.resume_id
        join tbl_notice n on a.notice_id = n.id
        <include refid="InterviewReviewSearch"/>
    </select>

    <!-- 포지션 후기(기업) -->
    <!-- 포지션(인턴십) 후기(기업) 작성 목록 검색 로직 -->
    <sql id="EvaluationCorporationSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                c.corporation_name like concat('%', #{search.keyword}, '%')
                or n.notice_title like concat('%', #{search.keyword}, '%')
                or m.member_name like concat('%', #{search.keyword}, '%')
                or m.member_phone like concat('%', #{search.keyword}, '%')
                or a.apply_type like concat('%', #{search.keyword}, '%')
                )
            </if>
        </where>
    </sql>

    <!-- 포지션(인턴십) 후기(기업) 작성 목록 조회 -->
    <select id="selectAllEvaluationCorporation">
        select
        c.corporation_name,
        ec.created_date,
        n.notice_work_start_date,
        n.notice_title,
        m.member_name,
        m.member_phone,
        a.apply_type,
        p.position_status
        from
        tbl_evaluation_corporation ec
        join tbl_corporation c on ec.id = c.id
        join tbl_notice n on c.id = n.corporation_id
        join tbl_apply a on n.id = a.notice_id
        join tbl_member m on a.resume_id = m.id
        join tbl_position p on n.id = p.notice_id
        <include refid="EvaluationCorporationSearch"/>
        order by ec.created_date desc
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 포지션(인턴십) 후기(기업) 작성 목록에서 전체 작성 수 확인 -->
    <select id="selectEvaluationCorporationTotal">
        select count(*)
        from
        tbl_evaluation_corporation ec
        join tbl_corporation c on ec.id = c.id
        join tbl_notice n on c.id = n.corporation_id
        join tbl_apply a on n.id = a.notice_id
        join tbl_member m on a.resume_id = m.id
        join tbl_position p on n.id = p.notice_id
    </select>

    <!-- 포지션(인턴십) 후기(기업) 작성 목록에서 검색 후 전체 작성 수 확인 -->
    <select id="selectTotalWithEvaluationCorporationSearch">
        select count(*)
        from
        tbl_evaluation_corporation ec
        join tbl_corporation c on ec.id = c.id
        join tbl_notice n on c.id = n.corporation_id
        join tbl_apply a on n.id = a.notice_id
        join tbl_member m on a.resume_id = m.id
        join tbl_position p on n.id = p.notice_id
        <include refid="EvaluationCorporationSearch"/>
    </select>

    <!-- 문의 관리 -->
    <!-- 일반 문의 -->
    <!-- 일반 문의 목록 검색 로직 -->
    <sql id="MemberInquirySearch">
        <if test="search.keyword != null and search.keyword != ''">
            and (
            i.inquiry_title like concat('%', #{search.keyword}, '%')
            or i.inquiry_content like concat('%', #{search.keyword}, '%')
            or m.member_name like concat('%', #{search.keyword}, '%')
            or coalesce(m.member_email, m.member_kakao_email) like concat('%', #{search.keyword}, '%')
            )
        </if>
        <if test="search.types != null and search.types.length > 0">
            <choose>
                <when test="search.types[0] == 'replyWait'">
                    and i.inquiry_status = '답변 예정'
                </when>
                <when test="search.types[0] == 'replyComplete'">
                    and i.inquiry_status = '답변 완료'
                </when>
            </choose>
        </if>
    </sql>

    <select id="selectAllMemberInquiry" resultType="inquiryDTO">
        select
        i.inquiry_category,
        i.created_date,
        i.inquiry_title,
        i.inquiry_content,
        m.member_name,
        coalesce(m.member_email, m.member_kakao_email) as memberEmail,
        i.inquiry_status
        from tbl_inquiry i
        join tbl_member m
        on i.member_id = m.id
        where i.inquiry_type = '개인'
        <include refid="MemberInquirySearch" />
        order by i.created_date desc
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>


    <select id="selectMemberInquiryTotal">
        select count(*)
        from tbl_inquiry i
        join tbl_member m
        on i.member_id = m.id
        where i.inquiry_type = '개인'
    </select>

    <select id="selectTotalWithMemberInquirySearch">
        select count(*)
        from tbl_inquiry i
        join tbl_member m
        on i.member_id = m.id
        where i.inquiry_type = '개인'
        <include refid="MemberInquirySearch" />
    </select>

    <!-- 기업 문의 목록 페이징 -->
    <!-- 기업 문의 목록 검색 로직 -->
    <sql id="CorporationInquirySearch">
        <if test="search.keyword != null and search.keyword != ''">
            and (
            i.inquiry_title like concat('%', #{search.keyword}, '%')
            or i.inquiry_content like concat('%', #{search.keyword}, '%')
            or (select c.corporation_name
            from tbl_corporation c
            where c.id = i.member_id) like concat('%', #{search.keyword}, '%')
            or (select c.corporation_email
            from tbl_corporation c
            where c.id = i.member_id) like concat('%', #{search.keyword}, '%')
            )
        </if>
        <if test="search.types != null and search.types.length > 0">
            <choose>
                <when test="search.types[0] == 'replyWait'">
                    and i.inquiry_status = '답변 예정'
                </when>
                <when test="search.types[0] == 'replyComplete'">
                    and i.inquiry_status = '답변 완료'
                </when>
            </choose>
        </if>
    </sql>

    <select id="selectAllCorporationInquiry" resultType="inquiryDTO">
        select
        i.inquiry_category,
        i.created_date,
        i.inquiry_title,
        i.inquiry_content,
        (select c.corporation_name
        from tbl_corporation c
        where c.id = i.member_id) AS corporation_name,
        (select c.corporation_email
        from tbl_corporation c
        where c.id = i.member_id) AS corporation_email,
        i.inquiry_status
        from
        tbl_inquiry i
        where
        i.inquiry_type = '기업'
        <include refid="CorporationInquirySearch"/>
        order by
        i.created_date desc
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <select id="selectCorporationInquiryTotal" resultType="int">
        select count(*)
        from tbl_inquiry i
        where i.inquiry_type = '기업'
    </select>

    <select id="selectTotalWithCorporationInquirySearch" resultType="int">
        select count(*)
        from tbl_inquiry i
        where i.inquiry_type = '기업'
        <include refid="CorporationInquirySearch"/>
    </select>

    <!-- 기업 후기 신고 -->
    <!-- 기업 후기 신고 검색 -->
    <sql id="ComplainSearch">
        <where>
            <if test="search.keyword != null and search.keyword != ''">
                (
                c1.corporation_name like concat('%', #{search.keyword}, '%')
                or c2.complain_content like concat('%', #{search.keyword}, '%')
                or m.member_name like concat('%', #{search.keyword}, '%')
                or c2.complain_count like concat('%', #{search.keyword}, '%')
                or c2.complain_status like concat('%', #{search.keyword}, '%')
                )
            </if>
            <if test="search.types != null and search.types.length >0">
                <choose>
                    <when test="search.types[0] == 'complainReceived'">
                        and c2.complain_status = '신고 접수'
                    </when>
                    <when test="search.types[0] == 'complainCompleted'">
                        and c2.complain_status = '처리 완료'
                    </when>
                </choose>
            </if>
        </where>
    </sql>

    <!-- 기업 후기 신고 목록 조회 -->
    <select id="selectAllComplain">
        select
        c1.corporation_name,
        c2.created_date,
        c2.complain_content,
        m.member_name,
        c2.complain_count,
        c2.complain_status
        from tbl_corporation c1
        join tbl_complain c2
        on c1.id = c2.corporation_id
        join tbl_member m
        on m.id = c2.member_id
        <include refid="ComplainSearch"/>
        <choose>
            <when test="search.types != null and search.types.length > 0">
                <if test="search.types[0] == 'recent'">
                    order by c2.created_date desc
                </if>
            </when>
            <otherwise>
                order by c2.created_date desc
            </otherwise>
        </choose>
        limit #{pagination.startRow}, #{pagination.rowCount}
    </select>

    <!-- 기업 후기 신고 목록에서 전체 신고 수 확인 -->
    <select id="selectComplainTotal">
        select count(*)
        from tbl_corporation c1
        join tbl_complain c2 on c1.id = c2.corporation_id
        join tbl_member m on m.id = c2.member_id
    </select>

    <!-- 기업 후기 신고 목록에서 검색 후 전체 신고 수 확인 -->
    <select id="selectTotalWithComplainSearch">
        select count(*)
        from tbl_corporation c1
        join tbl_complain c2 on c1.id = c2.corporation_id
        join tbl_member m on m.id = c2.member_id
        <include refid="ComplainSearch"/>
    </select>
</mapper>



















